service: backlog

provider:
  name: aws
  region: ap-northeast-1
  stage:
  memorySize: 128
  timeout: 300
  runtime: python3.7
  versionFunctions: true
  logRetentionInDays: 90

  deploymentBucket:
    name: ${self:custom.conf.base.project}-base-sls-s3

  tags:
    projecjt: ${self:custom.conf.base.project}
    env: ${opt:stage}
    role: ${self:service}
    created_by: ServerlessFramework

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.monthly_work}"
  environment:
    api_key: ${self:custom.conf.${opt:stage}.api_key}
    space_name: ${self:custom.conf.${opt:stage}.space_name}
    project_key: ${self:custom.conf.${opt:stage}.project_key}
    dynamo_tbl: ${self:custom.dynamodb.monthly_work}

custom:
  conf:
    base: ${file(./conf/base.yaml)}
    prod: ${file(./conf/prod.yaml)}
    dev:  ${file(./conf/dev.yaml)}
  dynamodb:
    monthly_work: ${self:custom.conf.base.project}-${opt:stage}-monthly_work-dynamodb

functions:
  monthlywork:
    name: ${self:custom.conf.base.project}-${opt:stage}-${self:service}-lambda
    handler: main.monthlywork
    description: Managed by ServerlessFramework
    events:
      - schedule:
          name: ${self:custom.conf.base.project}-${opt:stage}-${self:service}-cwe
          rate: ${self:custom.conf.${opt:stage}.rate}

resources:
  Resources:
    DynamoDbMonthlyWork:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: No
            AttributeType: N
        KeySchema:
          - AttributeName: No
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.dynamodb.monthly_work}
